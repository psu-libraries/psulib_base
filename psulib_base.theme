<?php

/**
 * @file
 * PSU Libraries Base theme file.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Render\Element;

/**
 * Implements hook_preprocess_page().
 */
function psulib_base_preprocess_page(array &$page) {
  // Create a variable to show column layout.
  $sidebar_first_content = \Drupal::service('renderer')->render($page['page']['sidebar_first']);
  $sidebar_first_real_content = preg_replace('/<!--(.*)-->/Uis', '', trim($sidebar_first_content));
  $page['has_sidebar_first'] = (bool) strlen(trim($sidebar_first_real_content));

  $sidebar_second_content = \Drupal::service('renderer')->render($page['page']['sidebar_second']);
  $sidebar_second_real_content = preg_replace('/<!--(.*)-->/Uis', '', trim($sidebar_second_content));
  $page['has_sidebar_second'] = (bool) strlen(trim($sidebar_second_real_content));
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Preloading webfonts that will be used on every page to limit FOUT.
 */
function psulib_base_page_attachments_alter(array &$attachments) {

  $theme_path = \Drupal::service('extension.list.theme')->getPath('psulib_base');

  $files = [
    $theme_path . '/assets/fonts/Roboto/roboto-regular-webfont.woff2',
    $theme_path . '/assets/fonts/Roboto_Condensed/robotocondensed-variablefont_wght-webfont.woff2',
  ];

  foreach ($files as $path) {
    $file_parts = explode('.', basename($path));
    $extension = end($file_parts);

    $attachments['#attached']['html_head_link'][] = [
      [
        'rel' => 'preload',
        'href' => $path,
        'as' => 'font',
        'type' => 'font/' . $extension,
        'crossorigin' => 'crossorigin',
      ],
      TRUE,
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-tasks templates.
 *
 * Use preprocess hook to set #attached to child elements
 * because they will be processed by Twig and drupal_render will
 * be invoked.
 */
function psulib_base_preprocess_menu_local_tasks(&$variables) {
  if (!empty($variables['primary'])) {
    $variables['primary']['#attached'] = [
      'library' => [
        'psulib_base/drupal.nav-tabs',
      ],
    ];
  }
  elseif (!empty($variables['secondary'])) {
    $variables['secondary']['#attached'] = [
      'library' => [
        'psulib_base/drupal.nav-tabs',
      ],
    ];
  }

  foreach (Element::children($variables['primary']) as $key) {
    $variables['primary'][$key]['#level'] = 'primary';
  }
  foreach (Element::children($variables['secondary']) as $key) {
    $variables['secondary'][$key]['#level'] = 'secondary';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
function psulib_base_preprocess_menu_local_task(&$variables) {
  // Ensure is-active class is set when the tab is active. The generic active
  // link handler applies stricter comparison rules than what is necessary for
  // tabs.
  if (isset($variables['is_active']) && $variables['is_active'] === TRUE) {
    $variables['link']['#options']['attributes']['class'][] = 'nav-link active is-active';
  }
  else {
    $variables['link']['#options']['attributes']['class'][] = 'nav-link';
  }

  if (isset($variables['element']['#level'])) {
    $variables['level'] = $variables['element']['#level'];
  }
}

/**
 * Callback to convert attributes class which is string to array.
 *
 * @param array $variables
 *   The variables to render from preprocess function.
 */
function _psulib_base_attributes_class_string_to_array(&$variables) {
  if (isset($variables['attributes']) &&
    isset($variables['attributes']['class']) &&
    !is_array($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [$variables['attributes']['class']];
  }
}

/**
 * Implements theme_preprocess_textarea().
 */
function psulib_base_preprocess_textarea(&$variables) {
  _psulib_base_attributes_class_string_to_array($variables);
  $variables['attributes']['class'][] = 'form-control';
}

/**
 * Implements template_preprocess_HOOK() for input.
 */
function psulib_base_preprocess_input(&$variables) {
  _psulib_base_attributes_class_string_to_array($variables);

  $type_html = $variables['attributes']['type'];
  $text_types_html = [
    'text',
    'email',
    'tel',
    'number',
    'search',
    'password',
    'url',
    'month',
    'week',
    'date',
    'time',
  ];

  if (in_array($type_html, $text_types_html)) {
    $variables['attributes']['class'][] = 'form-control';
  }

  if (in_array($type_html, ['checkbox'])) {
    $variables['attributes']['class'][] = 'form-check-input';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Pass block region value to content so this can be used in
 * THEME_theme_suggestions_menu_alter.
 */
function psulib_base_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $block = Block::load($variables['elements']['#id']);
    if ($block) {
      $region = Block::load($variables['elements']['#id'])->getRegion();
      if (!empty($region)) {
        $variables['content']['#attributes']['data-block']['region'] = $region;
      }
    }
  }
}

/**
 * Implements hook_preprocess_media_library_item__widget().
 *
 * This targets each media item selected in an entity reference field.
 */
function psulib_base_preprocess_media_library_item__widget(array &$variables) {
  $variables['content']['remove_button']['#attributes']['class'][] = 'media-library-item__remove';
  $variables['content']['remove_button']['#attributes']['class'][] = 'icon-link';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function psulib_base_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['attributes']['data-block']['region'])) {
    $region = $variables['attributes']['data-block']['region'];
    $suggestions[] = $variables['theme_hook_original'] . '__' . $region;
    $suggestions[] = 'menu__' . $region;
  }
}

/**
 * Implements theme_preprocess_table().
 */
function psulib_base_preprocess_table(&$variables) {
  _psulib_base_attributes_class_string_to_array($variables);
  $variables['attributes']['class'][] = 'table';
  $variables['attributes']['class'][] = 'table-striped';
}
